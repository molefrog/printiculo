{"version":3,"file":"public/javascripts/app.js","sources":["app/controllers/stations-controller.coffee","app/initialize.coffee","app/routes.coffee","app/views/base/base-view.coffee","app/views/site-view.coffee","app/views/templates/site.jade"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;;;GAAW,KAAX,SAAW;;AAiBX,CAjBA,EAiBuB,GAAjB,CAAN;CAIE;;;;;;;GAAc,SAAd;CAEG,CAAc,EAAd,CAAD;CAFF,EAAc;;CAAd,EAKO,EAAP,CAAO,GAAC;CACE,EAAR,IAAO,IAAP;CANF,EAKO;;CALP;;CAJgD,MAAO;A;;;ACpBzD;;GAAS,GAAT,CAAS;;AAET,CAFA,EAEE;CAGW,GAAR,GAAO,EAAP;CACH,CAAkB,EAAlB;EACW,EAAX,CADA,IACA;CADA,CAEQ,EAAR;CANA,GAGG;CAHH;A;;;ACDF,CAAO,EAAU,GAAX,CAAN,EAAkB;CAEX,CAAN;CAFgB;A;;;ACMjB;;;;GAAuB,GAAjB,CAAN;CAEC;;;;;;;GAAqB,gBAArB;CACE,UAAD;CADD,EAAqB;;CAArB;;CAFmC,MAAO;A;;;ACP3C;;;;GAAO,CAAP,GAAO;;AAGP,CAHA,EAGuB,GAAjB,CAAN;CACC;;;;;;;GAAW,GAAX;;EACA,CAAI,aADJ;;GAGC,IADD;CACC,CAAK,CAAL;EACM,EAAN,aADA;EAEY,EAAZ,YAFA;CAHD;;GAMU,KAAV,UAAU;;CANV;;CADuC;A;;CCHxC;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAdA;;A","sourcesContent":["# User = require 'models/user'\n# RandomUsersView = require 'views/random-users-view'\n# UserView = require 'views/user-view'\nSiteView = require 'views/site-view'\n \n# fixture = [\n#   {login: 'paulmillr'},\n#   {login: 'molily'},\n#   {login: 'paulirish'},\n#   {login: 'addyosmani'},\n#   {login: 'sindresorhus'},\n#   {login: 'dhh'},\n#   {login: 'mehcode'}\n# ]\n \n# Main application controller.\n# Controllers manage memory and initialize models with views,\n# storing them on current controller instance.\n# When URL is changed, controller disposes itself and all\n# instance properties (models, views etc).\nmodule.exports = class StationsController extends Chaplin.Controller\n  # Would be executed before each action.\n  # We do `composing` for views and things that should persist\n  # within many controllers — all non-composed views are deleted.\n  beforeAction: ->\n    # Site view declares “main” region.\n    @reuse 'site', SiteView\n\n  # Index action. Will just display a list of users.\n  index: (params) ->\n    console.log \"index route\"\n    # # Create simple collection with random GitHub users.\n    # @collection = new Chaplin.Collection fixture\n    # # Render the collection to view.\n    # @view = new RandomUsersView {\n    #   autoRender: true,\n    #   @collection, region: 'main'\n    # }\n\n  # show: (params) ->\n  #   # Initialize new User with login from URL params.\n  #   @model = new User login: params.login\n  #   @view = new UserView {@model, region: 'main'}\n  #   @model.fetch().then @view.render","routes = require \"routes\"\n\n$ ->\n# Initialize new Chaplin application.\n# Specify controller suffix for clarity.\n\tnew Chaplin.Application\n\t\tcontrollerSuffix: '-controller'\n\t\tpushState: false\n\t\troutes: routes","# All application routes that will be matched against URLs.\nmodule.exports = (match) ->\n\t# match '@:login', 'users#show'\n\tmatch '', 'stations#index'","# # Helper for Handlebars templates.\n# # http://handlebarsjs.com/#helpers\n# # Get Chaplin-declared named routes. {{url \"likes#show\" \"105\"}}\n# Handlebars.registerHelper 'url', (routeName, params..., options) ->\n#   Chaplin.helpers.reverse routeName, params\n \n# Base view.\nmodule.exports = class View extends Chaplin.View\n\t# Precompiled templates function initializer.\n\tgetTemplateFunction: ->\n\t\t@template","View = require 'views/base/base-view'\n \n# Site view is a top-level view which is bound to body.\nmodule.exports = class SiteView extends View\n\tcontainer: 'body'\n\tid: 'site-container'\n\tregions:\n\t\turl: '#page-url'\n\t\tmain: '#main-container'\n\t\tnavigation: '#nav-container'\n\ttemplate: require './templates/site'\n","var __templateData = function template(locals) {\nvar buf = [];\nvar jade_mixins = {};\n\nbuf.push(\"<div class=\\\"container\\\"><h1>Hello, world!</h1><p class=\\\"lead\\\">Hello there, guys.</p><a class=\\\"btn btn-lg btn-success\\\">Hi!</a></div>\");;return buf.join(\"\");\n};\nif (typeof define === 'function' && define.amd) {\n  define([], function() {\n    return __templateData;\n  });\n} else if (typeof module === 'object' && module && module.exports) {\n  module.exports = __templateData;\n} else {\n  __templateData;\n}"]}